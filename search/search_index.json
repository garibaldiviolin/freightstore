{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Freight Store Freight Store is a freight REST API, that uses Python, Django and Django REST frameworks to receive the maps and the map's routes (between many points, including the distance), and then allows the client to query the shortest path (map points / routes sequence) and the freight rate of this path's distance. Since the freight map's structure matches well with graph data type, the idea is to use these structures to represent the points and routes (using the nodes and edges of graphs), and calculate the shortest path and distance using Dijkstra's algorithm. The freight rate is based not only on the distance between the two points, but also on the fuel litter price and the vehicle fuel consumption, that is informed in the shortest path query. The map's name, routes and distance between the points are persisted to a database, and when the client requests the shortest path and freight rate, the API uses the Networkx python library to load the graph's edges and points and to calculate the shortest path and distance using Dijkstra's algorithm. This python library was used since it performs well using multiple graph nodes and edges, and has a rich documentation. However, there are other python libraries that could be used instead. More information Installing and Running API Documentation","title":"Home"},{"location":"#freight-store","text":"Freight Store is a freight REST API, that uses Python, Django and Django REST frameworks to receive the maps and the map's routes (between many points, including the distance), and then allows the client to query the shortest path (map points / routes sequence) and the freight rate of this path's distance. Since the freight map's structure matches well with graph data type, the idea is to use these structures to represent the points and routes (using the nodes and edges of graphs), and calculate the shortest path and distance using Dijkstra's algorithm. The freight rate is based not only on the distance between the two points, but also on the fuel litter price and the vehicle fuel consumption, that is informed in the shortest path query. The map's name, routes and distance between the points are persisted to a database, and when the client requests the shortest path and freight rate, the API uses the Networkx python library to load the graph's edges and points and to calculate the shortest path and distance using Dijkstra's algorithm. This python library was used since it performs well using multiple graph nodes and edges, and has a rich documentation. However, there are other python libraries that could be used instead.","title":"Freight Store"},{"location":"#more-information","text":"Installing and Running API Documentation","title":"More information"},{"location":"api/","text":"Maps endpoint URL that allows the creation the map resources URL: /api/v1/maps/ HTTP Method(s) Accepted: POST Format: JSON Body Params Field Type Required Description name string Yes The map's name Status Codes HTTP Status Code Type Status Code Success 201 (Created) Error 400 (Bad Request) Request example: { name : California } Response example: HTTP Status Code: 201 (Created) The same JSON body data of the request (above) Map Routes endpoint URL that receives and creates all of the map routes (with the origin and destination point) from the client. The client must have already sent (register) a map_name in the endpoint above before sending the map-routes. This endpoint only accepts the HTTP POST method (resouce creation). URL: /api/v1/maps-routes/ HTTP Method(s) Accepted: POST Format: JSON Body Params Field Type Required Description freight_map string Yes It's the same information sent in the maps endpoint (map_name). origin_point string Yes The point name where the route starts. destination_point string Yes The point name where the route ends. It must be different from the origin_point field. distance float Yes The distance between origin and destination points (in kilometers) Status Codes HTTP Status Code Type Status Code Success 201 (Created) Error 400 (Bad Request) Error Messages Message Reason Distance must be greater than zero. Distance field was sent with a value equal or less than zero. Origin must be different from destination point.' origin_point and destination_point was sent with the same value. Request example: HTTP Status Code: 201 (Created) { freight_map : California , origin_point : X , destination_point : Y , distance : 81232.594 } Response example: { freight_map : California , origin_point : X , destination_point : Y , distance : 81232.594 } Shortest Path endpoint URL that responds the shortest path and freight cost based on the map name, origin and destination points, fuel litter price and vehicle's fuel consumption, given in the URL. URL: /api/v1/shortest-path/ HTTP Method(s) Accepted: GET Format: JSON URL Request Params Field Type Required Description map_name string Yes The same information sent in the /api/v1/maps/ endpoint (map_name). origin_point string Yes The freight's starting point. It must be one of the points given in the /api/v1/map-routes/ endpoint. destination_point string Yes The same information sent in the /api/v1/maps/ endpoint (map_name). fuel_litter_price float Yes The fuel litter price must be a integer or decimal number. fuel_consumption float Yes The freight vehicle's fuel consumption (in kilometers per fuel litter). It must be a integer or decimal number. Body Response Format Field Type Required Description shortest_path string Yes The map points sequence (routes) that represents the shortest path between the origin and the destination point given in the request freight_rate string Yes The freight's calculated price Status Codes HTTP Status Code Type Status Code Success 200 (OK) Error 400 (Bad Request) Error Messages Message Reason map_name parameter must be supplied The map_name URL parameter was not informed. origin_point parameter must be supplied The origin_point URL parameter was not informed. destination_point parameter must be supplied The destination_point URL parameter was not informed. origin_point must be different from destination_point. The origin_point and destination point informed in the URL are the same. fuel_litter_price parameter must be supplied The fuel_litter_price URL parameter was not informed. fuel_litter_price must be numeric. The fuel_litter_price was informed with an invalid format. fuel_consumption parameter must be supplied The fuel_consumption URL parameter was not informed. fuel_consumption must be numeric. The fuel_consumption was informed with an invalid format. URL Request example: /api/v1/shortest-path/?map_name=California origin_point=B destination_point=Y fuel_litter_price=2.985 fuel_consumption=11.912 Response example: HTTP Status Code: 200 (OK) { shortest_path : ['H', 'A', 'P'] , freight_rate : 982.13 }","title":"API Documentation"},{"location":"api/#maps-endpoint","text":"URL that allows the creation the map resources URL: /api/v1/maps/ HTTP Method(s) Accepted: POST Format: JSON Body Params Field Type Required Description name string Yes The map's name Status Codes HTTP Status Code Type Status Code Success 201 (Created) Error 400 (Bad Request) Request example: { name : California } Response example: HTTP Status Code: 201 (Created) The same JSON body data of the request (above)","title":"Maps endpoint"},{"location":"api/#map-routes-endpoint","text":"URL that receives and creates all of the map routes (with the origin and destination point) from the client. The client must have already sent (register) a map_name in the endpoint above before sending the map-routes. This endpoint only accepts the HTTP POST method (resouce creation). URL: /api/v1/maps-routes/ HTTP Method(s) Accepted: POST Format: JSON Body Params Field Type Required Description freight_map string Yes It's the same information sent in the maps endpoint (map_name). origin_point string Yes The point name where the route starts. destination_point string Yes The point name where the route ends. It must be different from the origin_point field. distance float Yes The distance between origin and destination points (in kilometers) Status Codes HTTP Status Code Type Status Code Success 201 (Created) Error 400 (Bad Request) Error Messages Message Reason Distance must be greater than zero. Distance field was sent with a value equal or less than zero. Origin must be different from destination point.' origin_point and destination_point was sent with the same value. Request example: HTTP Status Code: 201 (Created) { freight_map : California , origin_point : X , destination_point : Y , distance : 81232.594 } Response example: { freight_map : California , origin_point : X , destination_point : Y , distance : 81232.594 }","title":"Map Routes endpoint"},{"location":"api/#shortest-path-endpoint","text":"URL that responds the shortest path and freight cost based on the map name, origin and destination points, fuel litter price and vehicle's fuel consumption, given in the URL. URL: /api/v1/shortest-path/ HTTP Method(s) Accepted: GET Format: JSON URL Request Params Field Type Required Description map_name string Yes The same information sent in the /api/v1/maps/ endpoint (map_name). origin_point string Yes The freight's starting point. It must be one of the points given in the /api/v1/map-routes/ endpoint. destination_point string Yes The same information sent in the /api/v1/maps/ endpoint (map_name). fuel_litter_price float Yes The fuel litter price must be a integer or decimal number. fuel_consumption float Yes The freight vehicle's fuel consumption (in kilometers per fuel litter). It must be a integer or decimal number. Body Response Format Field Type Required Description shortest_path string Yes The map points sequence (routes) that represents the shortest path between the origin and the destination point given in the request freight_rate string Yes The freight's calculated price Status Codes HTTP Status Code Type Status Code Success 200 (OK) Error 400 (Bad Request) Error Messages Message Reason map_name parameter must be supplied The map_name URL parameter was not informed. origin_point parameter must be supplied The origin_point URL parameter was not informed. destination_point parameter must be supplied The destination_point URL parameter was not informed. origin_point must be different from destination_point. The origin_point and destination point informed in the URL are the same. fuel_litter_price parameter must be supplied The fuel_litter_price URL parameter was not informed. fuel_litter_price must be numeric. The fuel_litter_price was informed with an invalid format. fuel_consumption parameter must be supplied The fuel_consumption URL parameter was not informed. fuel_consumption must be numeric. The fuel_consumption was informed with an invalid format. URL Request example: /api/v1/shortest-path/?map_name=California origin_point=B destination_point=Y fuel_litter_price=2.985 fuel_consumption=11.912 Response example: HTTP Status Code: 200 (OK) { shortest_path : ['H', 'A', 'P'] , freight_rate : 982.13 }","title":"Shortest Path endpoint"},{"location":"installation/","text":"Software Requirements python 3.5+ Django 2.0+ Django Rest Framework 3.8+ Coverage.py 4.3+ Although it is not necessary, it is highly recommended to use virtualenvwrapper , since it isolates the project's environment, allowing the development of many different projects' versions with different dependencies' versions. Installing Dependencies # After navigating to the project freightstore/src directory, install virtualenvwrapper $ pip install virtualenvwrapper # Additional steps (only for Linux users) $ export WORKON_HOME=~/Envs $ mkdir -p $WORKON_HOME $ source /usr/local/bin/virtualenvwrapper.sh # Create isolated enviroment (using freightenv as the name for the environment) $ mkvirtualenv freightenv # Use the freightenv environment created $ workon freightenv # Install the requirements $ pip install -r requirements.txt Running the Project # Use the freightenv environment $ workon freightenv # Execute migrations $ python manage.py migrate # After navigating to the project freightstore/src directory, start the server $ python manage.py runserver Running simple test with sample data It's possible to execute a test with the /api/v1/shortest-path/ endpoint by running the following steps: # Use the freightenv environment $ workon freightenv # After navigating to the project freightstore/src directory, execute migrations $ python manage.py migrate # Load the sample data $ python manage.py loaddata sample_data.json # Start the server $ python manage.py runserver After these commands, just access the following URL using a web browser. http://localhost:8000/api/v1/shortest-path/?map_name=Sao%20Paulo origin_point=A destination_point=D fuel_litter_price=2.50 fuel_consumption=10 Expected result: { shortest_path : ['A', 'B', 'D'] , freight_rate : 6.25 } Logging Freightstore uses python built-in logging library to trace and analyze incoming requests. By default, the log is disabled. To enable information logging, the application expects a configuration file (logging.conf) and the \"logs\" folder in the same directory as manage.py. There is a configuration file example (logging.conf_file) available in the project. Just rename this file to logging.conf, create the logs directory, restart the web server (python manage.py runserver), and a file will be created in the logs folder. The information level in this log depends on the configuration set in logging.conf. Running django unit tests # After navigating to the project freightstore/src directory, execute tests $ coverage run --source ./ ./manage.py test -v 2 The command above uses coverage.py library to analyze how much code the tests executed can cover. If the tests were executed with no errors, then the command shell should show the following messages in the last lines shown in the terminal (the time period may have a different value on a different machine, and number of tests - \"nn\" in the following lines - may change depending on the application's version): Ran nn tests in 0.455s OK Destroying test database for alias 'default' To analyse how much these tests cover each python script from this project, execute the following command: # Show each python script of the project and how much code is covered with the tests $ coverage report","title":"Installing and Running"},{"location":"installation/#software-requirements","text":"python 3.5+ Django 2.0+ Django Rest Framework 3.8+ Coverage.py 4.3+ Although it is not necessary, it is highly recommended to use virtualenvwrapper , since it isolates the project's environment, allowing the development of many different projects' versions with different dependencies' versions.","title":"Software Requirements"},{"location":"installation/#installing-dependencies","text":"# After navigating to the project freightstore/src directory, install virtualenvwrapper $ pip install virtualenvwrapper # Additional steps (only for Linux users) $ export WORKON_HOME=~/Envs $ mkdir -p $WORKON_HOME $ source /usr/local/bin/virtualenvwrapper.sh # Create isolated enviroment (using freightenv as the name for the environment) $ mkvirtualenv freightenv # Use the freightenv environment created $ workon freightenv # Install the requirements $ pip install -r requirements.txt","title":"Installing Dependencies"},{"location":"installation/#running-the-project","text":"# Use the freightenv environment $ workon freightenv # Execute migrations $ python manage.py migrate # After navigating to the project freightstore/src directory, start the server $ python manage.py runserver","title":"Running the Project"},{"location":"installation/#running-simple-test-with-sample-data","text":"It's possible to execute a test with the /api/v1/shortest-path/ endpoint by running the following steps: # Use the freightenv environment $ workon freightenv # After navigating to the project freightstore/src directory, execute migrations $ python manage.py migrate # Load the sample data $ python manage.py loaddata sample_data.json # Start the server $ python manage.py runserver After these commands, just access the following URL using a web browser. http://localhost:8000/api/v1/shortest-path/?map_name=Sao%20Paulo origin_point=A destination_point=D fuel_litter_price=2.50 fuel_consumption=10 Expected result: { shortest_path : ['A', 'B', 'D'] , freight_rate : 6.25 }","title":"Running simple test with sample data"},{"location":"installation/#logging","text":"Freightstore uses python built-in logging library to trace and analyze incoming requests. By default, the log is disabled. To enable information logging, the application expects a configuration file (logging.conf) and the \"logs\" folder in the same directory as manage.py. There is a configuration file example (logging.conf_file) available in the project. Just rename this file to logging.conf, create the logs directory, restart the web server (python manage.py runserver), and a file will be created in the logs folder. The information level in this log depends on the configuration set in logging.conf.","title":"Logging"},{"location":"installation/#running-django-unit-tests","text":"# After navigating to the project freightstore/src directory, execute tests $ coverage run --source ./ ./manage.py test -v 2 The command above uses coverage.py library to analyze how much code the tests executed can cover. If the tests were executed with no errors, then the command shell should show the following messages in the last lines shown in the terminal (the time period may have a different value on a different machine, and number of tests - \"nn\" in the following lines - may change depending on the application's version): Ran nn tests in 0.455s OK Destroying test database for alias 'default' To analyse how much these tests cover each python script from this project, execute the following command: # Show each python script of the project and how much code is covered with the tests $ coverage report","title":"Running django unit tests"}]}